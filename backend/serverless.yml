service:
  name: serverless-food-for-thought-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
custom:
  webpack:
    includeModules: true  

provider:
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  
  environment:
    RECIPE_COLLECTION_TABLE: RecipeCollection-${self:provider.stage}
    RECIPE_INDEX: RecipeIndex
    IS_OFFLINE: 'false'

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Retrieve data
  GetAllRecipes:
    handler: src/lambda/http/getAllRecipes.handler
    events:
      - http:
          method: get
          path: allrecipes
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
         - dynamodb:Query
         - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPE_COLLECTION_TABLE}
      - Effect: Allow
        Action:
         - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPE_COLLECTION_TABLE}/index/${self:provider.environment.RECIPE_INDEX}     
  
  GetUserRecipes:
    handler: src/lambda/http/getUserRecipes.handler
    events:
      - http:
          method: get 
          path: userrecipes
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPE_COLLECTION_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPE_COLLECTION_TABLE}/index/${self:provider.environment.RECIPE_INDEX}              
  
  # Add a recipe:
  AddRecipe:
    handler: src/lambda/http/addRecipe.handler
    events:
      - http:
          method: post
          path: recipes
          cors: true
          authorizer: Auth
          #request:
            #schema:
              #application/json: ${file(src/models/create-recipe-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPE_COLLECTION_TABLE}
resources:
  Resources:
    # Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: ApiGatewayRestApi

    RecipeCollectionDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: recipeId
            AttributeType: S 
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: recipeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECIPE_COLLECTION_TABLE}    